# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=100.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(2.5, 1.0))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=1000.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(200.0, 60.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='chamfered 1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['chamfered 1'].BaseSolidExtrude(depth=200.0, 
    sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['chamfered 1'].Chamfer(edgeList=(
    mdb.models['Model-1'].parts['chamfered 1'].edges[1], ), length=40.0)
mdb.models['Model-1'].Material(name='Chamfered 1 (material)')
mdb.models['Model-1'].materials['Chamfered 1 (material)'].Density(table=((0.0, 
    ), ))
mdb.models['Model-1'].materials['Chamfered 1 (material)'].Elastic(table=((0.5, 
    30000.0), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='Chamfered 1 (material)'
    , name='Chamfered 1 (section)', thickness=None)
mdb.models['Model-1'].parts['chamfered 1'].Set(cells=
    mdb.models['Model-1'].parts['chamfered 1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='materiall')
mdb.models['Model-1'].parts['chamfered 1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['chamfered 1'].sets['materiall'], sectionName=
    'Chamfered 1 (section)', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].Calibration(name='Calibration-1')
del mdb.models['Model-1'].calibrations['Calibration-1']
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='chamfered 1-1', 
    part=mdb.models['Model-1'].parts['chamfered 1'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='chamfered 1-2', 
    part=mdb.models['Model-1'].parts['chamfered 1'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='chamfered 1-3', 
    part=mdb.models['Model-1'].parts['chamfered 1'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='chamfered 1-4', 
    part=mdb.models['Model-1'].parts['chamfered 1'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='chamfered 1-5', 
    part=mdb.models['Model-1'].parts['chamfered 1'])
mdb.models['Model-1'].StaticStep(initialInc=1.0, name='Step-1', previous=
    'Initial')
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['chamfered 1-5'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=0.7, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-1'])
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['chamfered 1-5'].faces.getSequenceFromMask(
    ('[#20 ]', ), ), name='Set-1')
mdb.models['Model-1'].EncastreBC(createStepName='Step-1', localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['Set-1'])
mdb.models['Model-1'].parts['chamfered 1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].parts['chamfered 1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-2', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-M4VAJAV', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2'})
del mdb.jobs['Job-1']
del mdb.jobs['Job-2']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.models['Model-1'].steps['Step-1'].setValues(nlgeom=ON)
mdb.models['Model-1'].steps['Step-1'].setValues(nlgeom=OFF)
# Save by Admin on 2024_10_21-23.47.47; build 2018 2017_11_07-22.51.41 127140
